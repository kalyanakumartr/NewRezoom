
## MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/rezoom
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.show-sql=true
spring.jpa.hibernate.naming.physical-strategy=org.hbs.core.security.resource.RealNamingStrategyImpl

spring.application.name=v7-reader
server.port=10000
server.servlet.context-path=/core-reader
server.servlet.register-default-servlet=true

eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka/
eureka.client.healthcheck.enabled = true
eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=true

spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=employeeId
spring.kafka.consumer.auto-offset-reset: earliest
spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.listener.concurrency=3
spring.kafka.listener.poll-timeout=1

spring.kafka.producer.bootstrap-servers: localhost:9092
spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer: org.apache.kafka.common.serialization.StringSerializer

#30 Seconds
channel.email.delay= 30000
# One Week i.e. 24 * 7, Default 24 hours
email.imap.look.back.duration.in.hours=168 

##Key-Value pair seperated by comma
##
application.physical.paths=attachment#c:/data_process/upload
# output to a file
#logging.file=core-reader.log

# temp folder example
#logging.file=${java.io.tmpdir}/app.log

#logging.pattern.file=%d %p %c{1.} [%t] %m%n

#logging.pattern.console=%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n

## if no active profile, default is 'default'
##spring.profiles.active=prod

# root level
#logging.level.=INFO